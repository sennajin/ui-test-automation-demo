name: Smoke Tests

# Trigger conditions per spec requirements
on:
  pull_request:
    branches: [main]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Manual trigger with options
    inputs:
      viewport:
        description: 'Viewport to test (or "all"/"all-desktop"/"all-mobile")'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - all-desktop
          - all-mobile
          - small-desktop
          - standard-laptop
          - full-hd
          - large-desktop
          - iphone-12-safari
          - iphone-13-pro-safari
          - ipad-pro-safari
          - pixel-5-chrome
          - pixel-7-chrome
          - galaxy-s21-chrome
      test_file:
        description: 'Test file to run (or "all" for full suite)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - homepage.spec.ts
          - collection.spec.ts
          - cart.spec.ts
      description:
        description: 'Optional description for this test run'
        required: false
        type: string

jobs:
  test:
    name: Test - ${{ matrix.viewport }}
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Increased for mobile device testing
    
    strategy:
      # Don't cancel all jobs if one fails
      fail-fast: false
      matrix:
        # All viewport configurations (4 desktop + 6 mobile)
        # For manual runs, can be filtered by input
        viewport: ${{ 
          github.event_name == 'workflow_dispatch' && github.event.inputs.viewport == 'all-desktop' && fromJSON('["small-desktop", "standard-laptop", "full-hd", "large-desktop"]') ||
          github.event_name == 'workflow_dispatch' && github.event.inputs.viewport == 'all-mobile' && fromJSON('["iphone-12-safari", "iphone-13-pro-safari", "ipad-pro-safari", "pixel-5-chrome", "pixel-7-chrome", "galaxy-s21-chrome"]') ||
          github.event_name == 'workflow_dispatch' && github.event.inputs.viewport != 'all' && fromJSON(format('["{0}"]', github.event.inputs.viewport)) || 
          fromJSON('["small-desktop", "standard-laptop", "full-hd", "large-desktop", "iphone-12-safari", "iphone-13-pro-safari", "ipad-pro-safari", "pixel-5-chrome", "pixel-7-chrome", "galaxy-s21-chrome"]') 
          }}
    
    steps:
      - name: Display manual run info
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.description }}
        run: |
          echo "### Manual Test Run"
          echo "**Description:** ${{ github.event.inputs.description }}"
          echo "**Viewport:** ${{ github.event.inputs.viewport }}"
          echo "**Test File:** ${{ github.event.inputs.test_file }}"
          echo "**Triggered by:** ${{ github.actor }}"
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: |
          # Install chromium for desktop and Android devices
          npx playwright install chromium --with-deps
          # Install webkit for iOS devices (iPhone, iPad)
          npx playwright install webkit --with-deps
      
      - name: Run smoke tests
        env:
          STORE_URL: https://prometheamosaic.com/
          CI: true
        run: |
          TEST_FILE="${{ github.event.inputs.test_file }}"
          if [ "$TEST_FILE" = "all" ] || [ -z "$TEST_FILE" ]; then
            npx playwright test --project=${{ matrix.viewport }}
          else
            npx playwright test tests/smoke/$TEST_FILE --project=${{ matrix.viewport }}
          fi
      
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.viewport }}
          path: playwright-report/
          retention-days: 7  # Per spec requirement
      
      - name: Send failure email
        if: ${{ failure() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: '‚ö†Ô∏è Promethea Mosaic Smoke Tests Failed - ${{ matrix.viewport }}'
          to: johnsonjrre@gmail.com
          from: Promethea Mosaic CI <no-reply@github.com>
          body: |
            Test suite failed for device: ${{ matrix.viewport }}
            
            **Test Run Details:**
            - Run Number: ${{ github.run_number }}
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Triggered by: ${{ github.event_name }}
            ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.description && format('- Description: {0}', github.event.inputs.description) || '' }}
            ${{ github.event_name == 'workflow_dispatch' && format('- Test File: {0}', github.event.inputs.test_file) || '' }}
            ${{ github.event_name == 'workflow_dispatch' && format('- Initiated by: {0}', github.actor) || '' }}
            
            **View Full Report:**
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            **What to do:**
            1. Review the test report artifacts (link above)
            2. Check screenshots for visual clues
            3. If theme or content changed, update selectors
            4. See runbook for common issues: docs/runbook.md
            
            ---
            This is an automated message from the Promethea Mosaic smoke test suite.
          attachments: playwright-report/**/*.png

  # Post manual run summary
  manual-summary:
    name: Manual Run Summary
    runs-on: ubuntu-latest
    needs: test
    if: ${{ always() && github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Generate manual run summary
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Fetch job results
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            const testJobs = jobs.filter(j => j.name.startsWith('Test -'));
            const passed = testJobs.filter(j => j.conclusion === 'success').length;
            const failed = testJobs.filter(j => j.conclusion === 'failure').length;
            const skipped = testJobs.filter(j => j.conclusion === 'skipped').length;
            const total = testJobs.length;
            const passRate = total > 0 ? Math.round((passed / total) * 100) : 0;
            
            // Calculate total duration
            const totalDuration = testJobs.reduce((sum, j) => {
              if (j.started_at && j.completed_at) {
                return sum + (new Date(j.completed_at) - new Date(j.started_at));
              }
              return sum;
            }, 0);
            const durationMinutes = Math.round(totalDuration / 1000 / 60);
            
            // Device categorization
            const desktopJobs = testJobs.filter(j => 
              j.name.includes('desktop') || j.name.includes('hd'));
            const mobileJobs = testJobs.filter(j => 
              j.name.includes('iphone') || j.name.includes('ipad') || 
              j.name.includes('pixel') || j.name.includes('galaxy'));
            
            const desktopPassed = desktopJobs.filter(j => j.conclusion === 'success').length;
            const desktopFailed = desktopJobs.filter(j => j.conclusion === 'failure').length;
            const mobilePassed = mobileJobs.filter(j => j.conclusion === 'success').length;
            const mobileFailed = mobileJobs.filter(j => j.conclusion === 'failure').length;
            
            const desktopPassRate = desktopJobs.length > 0 ? 
              Math.round((desktopPassed / desktopJobs.length) * 100) : 0;
            const mobilePassRate = mobileJobs.length > 0 ? 
              Math.round((mobilePassed / mobileJobs.length) * 100) : 0;
            
            // Build summary
            let summary = '# üìä Manual Test Run Summary\n\n';
            
            // Run Configuration
            summary += '## Run Configuration\n\n';
            summary += '| Parameter | Value |\n';
            summary += '|-----------|-------|\n';
            summary += `| **Triggered by** | @${{ github.actor }} |\n`;
            summary += `| **Timestamp** | ${new Date().toISOString().replace('T', ' ').substring(0, 19)} UTC |\n`;
            summary += `| **Commit** | \`${{ github.sha }}\`.substring(0, 7) |\n`;
            summary += `| **Branch** | \`${{ github.ref_name }}\` |\n`;
            summary += `| **Viewport Filter** | \`${{ github.event.inputs.viewport }}\` |\n`;
            summary += `| **Test File Filter** | \`${{ github.event.inputs.test_file }}\` |\n`;
            if ('${{ github.event.inputs.description }}') {
              summary += `| **Description** | ${{ github.event.inputs.description }} |\n`;
            }
            summary += '\n';
            
            // Results Overview
            summary += '## Results Overview\n\n';
            const statusEmoji = failed === 0 ? 'üü¢' : 'üî¥';
            const statusText = failed === 0 ? 'ALL PASSED' : 'FAILURES DETECTED';
            summary += `### ${statusEmoji} ${statusText}\n\n`;
            summary += '| Metric | Value |\n';
            summary += '|--------|-------|\n';
            summary += `| **Total Tests** | ${total} |\n`;
            summary += `| **Passed** | ‚úÖ ${passed} |\n`;
            summary += `| **Failed** | ‚ùå ${failed} |\n`;
            summary += `| **Skipped** | ‚è≠Ô∏è ${skipped} |\n`;
            summary += `| **Pass Rate** | ${passRate}% |\n`;
            summary += `| **Duration** | ${durationMinutes} minutes |\n`;
            summary += '\n';
            
            // Device Coverage Breakdown
            summary += '## Device Coverage\n\n';
            summary += '| Device Type | Tests | Passed | Failed | Pass Rate |\n';
            summary += '|-------------|-------|--------|--------|----------|\n';
            summary += `| **Desktop** | ${desktopJobs.length} | ‚úÖ ${desktopPassed} | ‚ùå ${desktopFailed} | ${desktopPassRate}% |\n`;
            summary += `| **Mobile** | ${mobileJobs.length} | ‚úÖ ${mobilePassed} | ‚ùå ${mobileFailed} | ${mobilePassRate}% |\n`;
            summary += `| **Total** | ${total} | ‚úÖ ${passed} | ‚ùå ${failed} | ${passRate}% |\n`;
            summary += '\n';
            
            // Failed Tests Detail
            if (failed > 0) {
              summary += '## Failed Tests\n\n';
              summary += '| Device | Status | Duration | Artifacts |\n';
              summary += '|--------|--------|----------|----------|\n';
              testJobs.filter(j => j.conclusion === 'failure').forEach(job => {
                const device = job.name.replace('Test - ', '');
                const duration = job.started_at && job.completed_at ? 
                  Math.round((new Date(job.completed_at) - new Date(job.started_at)) / 1000) : 0;
                const artifactLink = `[üìÅ View](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
                summary += `| ${device} | ‚ùå Failed | ${duration}s | ${artifactLink} |\n`;
              });
              summary += '\n';
            }
            
            // Historical Comparison (placeholder for now - will be enhanced in US3)
            summary += '## Historical Comparison\n\n';
            summary += '> Historical trend data will be available after GitHub Pages publishing is enabled.\n\n';
            summary += '_Coming soon: Pass rate trends, flaky test detection, duration comparison_\n\n';
            
            // Detailed Reports Links
            summary += '## Detailed Reports\n\n';
            summary += '- üìä [Playwright HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) (download artifacts)\n';
            summary += '- üéØ [Allure Report](placeholder - will be available after US3 implementation)\n';
            summary += '- üì¶ [All Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n';
            summary += '\n';
            
            // Write to step summary
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, summary);
            
            core.info('‚úÖ Manual run summary generated successfully');

  # Post PR comment with test summary
  report:
    name: Post PR Comment
    runs-on: ubuntu-latest
    needs: test
    if: ${{ always() && github.event_name == 'pull_request' }}
    
    steps:
      - name: Post PR comment
        uses: actions/github-script@v6
        with:
          script: |
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            const testJobs = jobs.filter(j => j.name.startsWith('Test -'));
            const passed = testJobs.filter(j => j.conclusion === 'success').length;
            const failed = testJobs.filter(j => j.conclusion === 'failure').length;
            const total = testJobs.length;
            
            // Categorize by device type
            const desktopJobs = testJobs.filter(j => j.name.includes('desktop') || j.name.includes('hd'));
            const mobileJobs = testJobs.filter(j => !j.name.includes('desktop') && !j.name.includes('hd'));
            
            const desktopPassed = desktopJobs.filter(j => j.conclusion === 'success').length;
            const mobilePassed = mobileJobs.filter(j => j.conclusion === 'success').length;
            
            // Determine overall status
            const status = failed === 0 ? 'All tests passed!' : `${failed} device(s) failed`;
            const emoji = failed === 0 ? '‚úÖ' : '‚ùå';
            
            const body = `## ${emoji} Smoke Test Results
            
            **Status:** ${status}
            
            | Device | Status | Duration |
            |----------|--------|----------|
            ${testJobs.map(j => {
              const viewport = j.name.replace('Test - ', '');
              const status = j.conclusion === 'success' ? '‚úÖ Passed' : '‚ùå Failed';
              const duration = Math.round((new Date(j.completed_at) - new Date(j.started_at)) / 1000);
              return `| ${viewport} | ${status} | ${duration}s |`;
            }).join('\n')}
            
            **Summary:** 
            - Desktop: ${desktopPassed}/${desktopJobs.length} passed
            - Mobile: ${mobilePassed}/${mobileJobs.length} passed
            - Total: ${passed}/${total} devices passed
            
            ${failed > 0 ? '**Action Required:** Review failed test artifacts and screenshots in the workflow run.' : ''}
            
            [View Full Report ‚Üí](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            ---
            <sub>Automated smoke test suite ‚Ä¢ [View Constitution](specs/001-build-an-mvp/plan.md)</sub>
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

